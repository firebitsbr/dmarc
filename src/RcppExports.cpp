// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// is_dmarc_valid
std::vector< bool > is_dmarc_valid(std::vector< std::string> domains, std::vector< std::string> dmarc_records);
RcppExport SEXP _dmarc_is_dmarc_valid(SEXP domainsSEXP, SEXP dmarc_recordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string> >::type domains(domainsSEXP);
    Rcpp::traits::input_parameter< std::vector< std::string> >::type dmarc_records(dmarc_recordsSEXP);
    rcpp_result_gen = Rcpp::wrap(is_dmarc_valid(domains, dmarc_records));
    return rcpp_result_gen;
END_RCPP
}
// read_dmarc
DataFrame read_dmarc(std::vector< std::string> domains);
RcppExport SEXP _dmarc_read_dmarc(SEXP domainsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string> >::type domains(domainsSEXP);
    rcpp_result_gen = Rcpp::wrap(read_dmarc(domains));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dmarc_is_dmarc_valid", (DL_FUNC) &_dmarc_is_dmarc_valid, 2},
    {"_dmarc_read_dmarc", (DL_FUNC) &_dmarc_read_dmarc, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_dmarc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
